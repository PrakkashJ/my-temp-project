name: Draft Release on Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write

jobs:
  draft-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASE_EXISTS=$(gh release view ${{ steps.version.outputs.version }} --json url -q '.url' 2>/dev/null || echo "false")
          if [ "$RELEASE_EXISTS" != "false" ]; then
            echo "Release ${{ steps.version.outputs.version }} already exists."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${{ steps.version.outputs.version }} does not exist."
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Draft new release
        if: steps.check-release.outputs.release_exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.version.outputs.version }} --title "Release ${{ steps.version.outputs.version }}" --draft --generate-notes

      - name: Publish release
        if: steps.check-release.outputs.release_exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release edit ${{ steps.version.outputs.version }} --draft=false
